name: Docker Build and Push

on:
  workflow_dispatch:
  push:
    branches: [ cinema ]
    paths:
      - 'src/**'
      - '.github/workflows/docker-build-push.yml'
      - 'tests/**'
      - 'docker-compose.yml'
      - 'Dockerfile*'
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  MONOLITH_IMAGE_NAME: ${{ github.repository }}/monolith
  MOVIES_SERVICE_IMAGE_NAME: ${{ github.repository }}/movies-service
  EVENTS_SERVICE_IMAGE_NAME: ${{ github.repository }}/events-service
  PROXY_SERVICE_IMAGE_NAME: ${{ github.repository }}/proxy-service
  TESTS_IMAGE_NAME: ${{ github.repository }}/tests

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Monolith
      - name: Extract metadata for Monolith
        id: meta-monolith
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.MONOLITH_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,format=short
            latest

      - name: Build and push Monolith
        uses: docker/build-push-action@v4
        with:
          context: ./src/monolith
          push: true
          tags: ${{ steps.meta-monolith.outputs.tags }}
          labels: ${{ steps.meta-monolith.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Movies Service
      - name: Extract metadata for Movies Service
        id: meta-movies
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.MOVIES_SERVICE_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,format=short
            latest

      - name: Build and push Movies Service
        uses: docker/build-push-action@v4
        with:
          context: ./src/microservices/movies
          push: true
          tags: ${{ steps.meta-movies.outputs.tags }}
          labels: ${{ steps.meta-movies.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Events Service
      - name: Extract metadata for Events Service
        id: meta-events
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.EVENTS_SERVICE_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,format=short
            latest

      - name: Build and push Events Service
        uses: docker/build-push-action@v4
        with:
          context: ./src/microservices/events
          push: true
          tags: ${{ steps.meta-events.outputs.tags }}
          labels: ${{ steps.meta-events.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Proxy Service
     - name: Build and push events-service
        uses: docker/build-push-action@v4
        with:
          context: ./src/microservices/events
          push: true
          tags: ${{ env.REGISTRY }}/${{ github.repository }}/events-service:latest
          platforms: linux/amd64

      - name: Build and push Proxy Service
        uses: docker/build-push-action@v4
        with:
          context: ./src/microservices/proxy
          push: true
          tags: ${{ steps.meta-proxy.outputs.tags }}
          labels: ${{ steps.meta-proxy.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Tests (NEW)
      - name: Extract metadata for Tests
        id: meta-tests
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.TESTS_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,format=short
            latest

      - name: Build and push Tests
        uses: docker/build-push-action@v4
        with:
          context: ./tests/postman
          push: true
          tags: ${{ steps.meta-tests.outputs.tags }}
          labels: ${{ steps.meta-tests.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
