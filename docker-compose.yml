version: "3.9"

services:
  postgres:
    image: postgres:14
    container_name: cinemaabyss-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres_password
      POSTGRES_DB: cinemaabyss
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./src/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cinemaabyss-network

  monolith:
    image: ${MONOLITH_IMAGE:-monolith-service:local}
    build:
      context: ./src/monolith
      dockerfile: Dockerfile
    container_name: cinemaabyss-monolith
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      PORT: 8080
      DB_CONNECTION_STRING: postgres://postgres:postgres_password@postgres:5432/cinemaabyss?sslmode=disable
    networks:
      - cinemaabyss-network

  movies-service:
    image: ${MOVIES_IMAGE:-movies-service:local}
    build:
      context: ./src/microservices/movies
      dockerfile: Dockerfile
    container_name: cinemaabyss-movies-service
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      PORT: 8081
      DB_CONNECTION_STRING: postgres://postgres:postgres_password@postgres:5432/cinemaabyss?sslmode=disable
    networks:
      - cinemaabyss-network

  proxy-service:
    image: ${PROXY_IMAGE:-proxy-service:local}
    build:
      context: ./src/microservices/proxy
    container_name: cinemaabyss-proxy-service
    depends_on:
      - monolith
      - movies-service
    ports:
      - "8000:8000"
    environment:
      PORT: 8000
      MONOLITH_URL: http://monolith:8080
      MOVIES_SERVICE_URL: http://movies-service:8081
      GRADUAL_MIGRATION: "true"
      MOVIES_MIGRATION_PERCENT: "50"
    networks:
      - cinemaabyss-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  events-service:
    image: ${EVENTS_IMAGE:-events-service:local}
    build:
      context: ./src/microservices/events
    container_name: cinemaabyss-events-service
    ports:
      - "8082:8082"
    environment:
      PORT: 8082
      KAFKA_BROKER: kafka:9092
    networks:
      - cinemaabyss-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8082/api/events/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: cinemaabyss-zookeeper
    ports:
      - "2181:2181"
    networks:
      - cinemaabyss-network

  kafka:
    image: wurstmeister/kafka:2.13-2.7.0
    container_name: cinemaabyss-kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    networks:
      - cinemaabyss-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: cinemaabyss-kafka-ui
    ports:
      - "8090:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      - kafka
    networks:
      - cinemaabyss-network

networks:
  cinemaabyss-network:

volumes:
  postgres-data:
