name: Docker Build, Push and Test

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'docker-compose.yml'
      - '.github/workflows/docker-build-push.yml'
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAMESPACE: ${{ github.repository }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Сборка и пуш (для артефактов/деплоя) — не влияет на тесты
      - name: Build & push images
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ github.repository }}/monolith-service:latest ./src/monolith
          docker build -t ${{ env.REGISTRY }}/${{ github.repository }}/movies-service:latest ./src/microservices/movies
          docker build -t ${{ env.REGISTRY }}/${{ github.repository }}/events-service:latest ./src/microservices/events
          docker build -t ${{ env.REGISTRY }}/${{ github.repository }}/proxy-service:latest ./src/microservices/proxy
          docker push ${{ env.REGISTRY }}/${{ github.repository }}/monolith-service:latest
          docker push ${{ env.REGISTRY }}/${{ github.repository }}/movies-service:latest
          docker push ${{ env.REGISTRY }}/${{ github.repository }}/events-service:latest
          docker push ${{ env.REGISTRY }}/${{ github.repository }}/proxy-service:latest

      # Поднимаем локально собранные сервисы (compose сам соберёт из ./src/**)
      - name: Docker compose up
        run: |
          docker compose up -d --build
          echo "⏳ Waiting ports 8080,8081,8082,8000..."
          for p in 8080 8081 8082 8000; do
            for i in {1..60}; do
              (echo > /dev/tcp/127.0.0.1/$p) >/dev/null 2>&1 && break
              sleep 2
            done
          done
          docker ps -a

      # Node для запуска newman на ХОСТЕ (это важно, т.к. в тестах 127.0.0.1)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install test deps
        working-directory: tests/postman
        run: npm ci || npm install

      - name: Ensure script is executable
        run: chmod +x tests/postman/run-tests.sh

      - name: Run API tests (host)
        working-directory: tests/postman
        run: ./run-tests.sh

      # Логи на случай фейла — чтобы быстро дебажить
      - name: Dump docker logs on failure
        if: failure()
        run: |
          docker compose ps
          docker compose logs --no-color --tail=200

      - name: Docker compose down
        if: always()
        run: docker compose down -v
