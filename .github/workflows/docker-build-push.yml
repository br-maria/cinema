name: Docker Build and Push

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - '.github/workflows/docker-build-push.yml'
      - 'docker-compose.yml'
      - 'tests/**'
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  MONOLITH_IMAGE_NAME: ${{ github.repository }}/monolith
  MOVIES_IMAGE_NAME: ${{ github.repository }}/movies-service
  EVENTS_IMAGE_NAME: ${{ github.repository }}/events-service
  PROXY_IMAGE_NAME: ${{ github.repository }}/proxy-service
  TESTS_IMAGE_NAME: ${{ github.repository }}/tests

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Monolith
      - name: Build and push Monolith
        uses: docker/build-push-action@v4
        with:
          context: ./src/monolith
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.MONOLITH_IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Movies Service
      - name: Build and push Movies Service
        uses: docker/build-push-action@v4
        with:
          context: ./src/microservices/movies
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.MOVIES_IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Events Service
      - name: Build and push Events Service
        uses: docker/build-push-action@v4
        with:
          context: ./src/microservices/events
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.EVENTS_IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Proxy Service
      - name: Build and push Proxy Service
        uses: docker/build-push-action@v4
        with:
          context: ./src/microservices/proxy
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.PROXY_IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Tests (Postman tests)
      - name: Build and push Tests
        uses: docker/build-push-action@v4
        with:
          context: ./tests/postman
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.TESTS_IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  api-tests:
    runs-on: ubuntu-latest
    needs: build-and-push
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres_password
          POSTGRES_DB: cinemaabyss
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      zookeeper:
        image: wurstmeister/zookeeper:latest
      kafka:
        image: wurstmeister/kafka:2.13-2.7.0
        environment:
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Wait for services to be ready
        run: |
          sleep 30 # Wait for PostgreSQL, Kafka to start

      - name: Run API Tests
        run: |
          docker run --rm \
            --network host \
            -e API_URL=http://localhost:8000 \
            -e DB_HOST=localhost \
            -e DB_PORT=5432 \
            -e DB_USER=postgres \
            -e DB_PASSWORD=postgres_password \
            -e DB_NAME=cinemaabyss \
            -e KAFKA_BROKERS=localhost:9092 \
            ${{ env.REGISTRY }}/${{ env.TESTS_IMAGE_NAME }}:latest
